<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Nogueira</title>
    <description>Senior software engineer and agile manager. React, and Node.js enthusiast. &lt;br/&gt; Engineering Lead @ &lt;a href='https://www.bcgdv.com'&gt;BCG Digital Ventures&lt;/a&gt;. Berlin, Germany</description>
    <link>https://www.hugomagalhaes.com/</link>
    <atom:link href="https://www.hugomagalhaes.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 13 Nov 2018 21:13:31 +0100</pubDate>
    <lastBuildDate>Tue, 13 Nov 2018 21:13:31 +0100</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>How to develop reusable components with Babel and RollupJS</title>
        <description>&lt;p&gt;On October 10th, I have had the pleasure of talking about reusable components using the Rollup.js library, at the meetup &lt;a href=&quot;https://www.meetup.com/React-Open-Source/&quot;&gt;React Open Source&lt;/a&gt; in Berlin. I tried to show, with a very simple example, the context of creating the concept of modules in JavaScript. I also did a live-coding session, showing how to create and publish reusable components. Watch the full video at the end of this post.&lt;/p&gt;

&lt;h2 id=&quot;why-would-i-need-to-expose-my-components&quot;&gt;Why would I need to expose my components?&lt;/h2&gt;
&lt;p&gt;There are several reasons and examples of situations where it is interesting to create reusable components. It is important to list some of them:&lt;/p&gt;

&lt;h3 id=&quot;1-sharing-components-between-different-applications&quot;&gt;1. Sharing components between different applications&lt;/h3&gt;
&lt;p&gt;This is the most obvious and most common case. The essential idea of ‚Äã‚Äãcomponent architecture is to create reusable pieces of code. A classic example of reusability is the creation of UI components that can be reused among different applications.&lt;/p&gt;

&lt;h3 id=&quot;2-sharing-configuration&quot;&gt;2. Sharing configuration&lt;/h3&gt;
&lt;p&gt;Another fairly common case of reuse happens when we need to share configurations between projects. A simple way to do this is to compile the settings as components.&lt;/p&gt;

&lt;h3 id=&quot;3-micro-services-for-front-end-applications&quot;&gt;3. Micro-services for front-end applications&lt;/h3&gt;
&lt;p&gt;The micro-service architecture is a development and deploy technique that relies on services with well-defined and totally disconnected responsibilities, providing system maintenance and scalability. This approach has become common in front-end applications and the use of reusable components is a way of developing micro-services.&lt;/p&gt;

&lt;h2 id=&quot;how-to-manage-encapsulation-and-dependency-in-javascript&quot;&gt;How to manage encapsulation and dependency in JavaScript?&lt;/h2&gt;
&lt;p&gt;A basic principle for creating independent and reusable components is that they should be encapsulated and that the dependencies are properly managed. To solve this problem, the concept of JavaScript Modules has been introduced.&lt;/p&gt;

&lt;p&gt;Initially, immediately executed functions (IIFE) and the ‚ÄúRevelling module‚Äù standard for components creation were used, as in the following example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/hugomn/0324b8515dddff5c4c30b18d581a1021.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;commonjs&quot;&gt;CommonJS&lt;/h3&gt;

&lt;p&gt;In January 2009, however, Kevin Danger started the CommonJS project for better standardization of JavaScript components, especially for server-side scripts. The project was initially called &lt;strong&gt;ServerJS&lt;/strong&gt;. The project introduced the concepts of &lt;strong&gt;require&lt;/strong&gt;, &lt;strong&gt;exports&lt;/strong&gt; and &lt;strong&gt;module&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But in May 2013, Isaac Z. Schlueter, npm author, said that CommonJS was being discontinued by Node.js, and that it would be avoided by the project maintainers. The following is an example of a module using CommonJS:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/hugomn/dd0ee6ab22228ad409311eccc91d14c4.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/hugomn/4e386b62684967a4cd691a3e2d408a45.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;asynchronous-module-definition-amd&quot;&gt;Asynchronous Module Definition (AMD)&lt;/h3&gt;

&lt;p&gt;Since the implementation of CommonJS was not compatible with browsers, the definition of asynchronous modules, or AMD, was introduced. AMD was created to be used in browsers to improve applications startup time, and such modules could be objects, functions, constructors, strings, JSON, etc. Here is an example of an AMD module:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/hugomn/bd04b870151a2c1c61ca696ebfcff6d0.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;es2015-modules&quot;&gt;ES2015 Modules&lt;/h3&gt;

&lt;p&gt;ES2015 modules have been implemented in the recent ECMAScript 2015 implementation of Javascript, and are compatible with the &lt;strong&gt;asynchronous&lt;/strong&gt; and &lt;strong&gt;synchronous&lt;/strong&gt; approaches. And it has one great advantage: &lt;strong&gt;it‚Äôs native JavaScript! ü§©&lt;/strong&gt;. However it is not completely available in all browsers and for this you need a &lt;strong&gt;transpiler&lt;/strong&gt; like &lt;strong&gt;Babel&lt;/strong&gt; for example.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/hugomn/8cf95a5619aac64bebd220abe21acf00.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/hugomn/c7970afb33ff7a1af5b476a89a4a844b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now that we‚Äôve seen a quick introduction to JavaScript modules, let‚Äôs understand how &lt;strong&gt;Rollup.js&lt;/strong&gt; can help us compile our components into reusable components.&lt;/p&gt;

&lt;h2 id=&quot;what-is-rollupjs&quot;&gt;What is Rollup.js?&lt;/h2&gt;
&lt;p&gt;Rollup is a module bundler for JavaScript libraries that compiles small pieces of code into something larger and more complex, such as a library or an application.&lt;/p&gt;

&lt;p&gt;You must be asking yourself? &lt;strong&gt;Why not Webpack?&lt;/strong&gt; Webpack was basically created as a bundler for web applications, mainly to solve code-splitting and asset management issues. Recently both libraries have grown a lot and are able to solve most of the problems, both for libraries, and for web applications. However, conventional wisdow among bundlers has been this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For complex web applications, use &lt;strong&gt;Webpack&lt;/strong&gt;. For libraries, use &lt;strong&gt;Rollup&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;talk-is-cheap-show-me-the-code&quot;&gt;Talk is cheap, show me the code&lt;/h2&gt;
&lt;p&gt;Let‚Äôs finally see a real example. I will use an extremely basic &lt;strong&gt;React&lt;/strong&gt; component. We‚Äôll create a &lt;strong&gt;Header&lt;/strong&gt;, and compile it for reuse on external projects!&lt;/p&gt;

&lt;h4 id=&quot;1-first-we-need-to-install-rollupjs-globally&quot;&gt;1. First, we need to install Rollup.js globally&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; rollup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-now-we-create-our-basic-header-component&quot;&gt;2. Now, we create our basic header component&lt;/h4&gt;
&lt;p&gt;Our component will only have a tag &lt;strong&gt;&amp;lt;h1&amp;gt;&lt;/strong&gt;, and will be published in npm so it can be used by other projects:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/header.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-we-need-to-export-our-header-component&quot;&gt;3. We need to export our Header component&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/main.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./header.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we intend to use ES6 modules, we will need to install and configure &lt;strong&gt;Babel&lt;/strong&gt; so that our component is correctly compiled.&lt;/p&gt;

&lt;h4 id=&quot;4-installing-and-configuring-babel&quot;&gt;4. Installing and configuring Babel&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @babel/core @babel/cli @babel/present-env @babel/present-react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// babel.config.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;@babel/env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/preset-react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have installed and configured Babel, we need to install the  &lt;strong&gt;Rollup.js&lt;/strong&gt; plugin that will integrate with &lt;strong&gt;Babel&lt;/strong&gt;:&lt;/p&gt;

&lt;h4 id=&quot;5-installing-rollupjs-babel-plugin&quot;&gt;5. Installing Rollup.js Babel plugin&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; rollup-plugin-babel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// rollup.config.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rollup-plugin-babel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/main.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reusableComponents&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dist/main.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;iife&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;node_modules/**&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It‚Äôs super important to note the line &lt;strong&gt;external: [‚Äúreact‚Äù]&lt;/strong&gt; 
Without this configuration, Rollup will compile the entire React source code along with your library.&lt;/p&gt;

&lt;p&gt;Now we can already compile our component:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rollup &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After compiled, your library will be compiled and available at &lt;strong&gt;dist/main.js&lt;/strong&gt;. As a final step, we just need to publish your component to npm repository so that it can be used by other projects.&lt;/p&gt;

&lt;h4 id=&quot;6-publishing-your-library-in-ppm&quot;&gt;6. Publishing your library in ppm&lt;/h4&gt;

&lt;p&gt;Before publishing your library, you need to be logged in to npm, and you will probably need to set up the SSH keys in your account.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm publish &lt;span class=&quot;nt&quot;&gt;--access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ready! Once published, your library and its components will now be available via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; on your other projects. üéâ&lt;/p&gt;

&lt;h4 id=&quot;7-bonus-tip-using-npm-link-to-configure-your-development-environment&quot;&gt;7. &lt;strong&gt;Bonus Tip:&lt;/strong&gt; Using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm link&lt;/code&gt; to configure your development environment&lt;/h4&gt;

&lt;p&gt;To avoid having to publish and update your component every time you make a change, there is a simple way to reference your component locally in your projects.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your library, create a virtual link using the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm link&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;In the project that uses your library, run the same command, now referencing the library, for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm link @hugomn/reusable-components&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We‚Äôre ready! Now you have a complete and simple environment to develop your reusable components. I hope you enjoy it and please send me any questions or feedback you have. ü§òüèª&lt;/p&gt;

&lt;h2 id=&quot;watch-the-full-video&quot;&gt;Watch the full video&lt;/h2&gt;
&lt;p&gt;Below are the slides and the full video of the talk.&lt;/p&gt;

&lt;div class=&quot;container&quot; style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 56.25%; margin-bottom: 40px&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/Dve_bYaAVZ0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div style=&quot;left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.1987%;&quot;&gt;&lt;iframe src=&quot;//speakerdeck.com/player/95ae0fbc24be49d88f1a7a0b333e984f&quot; style=&quot;border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;&quot; allowfullscreen=&quot;&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 26 Sep 2018 00:00:00 +0200</pubDate>
        <link>https://www.hugomagalhaes.com/blog/how-to-develop-reusable-components-with-babel-and-rollupjs</link>
        <guid isPermaLink="true">https://www.hugomagalhaes.com/blog/how-to-develop-reusable-components-with-babel-and-rollupjs</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>var, let or const?</title>
        <description>&lt;p&gt;One (or two) of the most important features that came with ES2015 (ES6) was¬† the addition of &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; which can be used for variable declaration. But, the first question that you may have is: what makes them different from our old &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;? If you are still not clear about this, this article is for you.&lt;/p&gt;

&lt;p&gt;Let‚Äôs first review the most important points about &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;var-declarations&quot;&gt;Var declarations&lt;/h1&gt;

&lt;p&gt;I‚Äôm assuming that we all know that &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is used to assign some value to a variable that can be reused later. What is important to understand here is the scope where that value will be acessible.&lt;/p&gt;

&lt;h1 id=&quot;var-scope&quot;&gt;Var scope&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; are always &lt;em&gt;globally&lt;/em&gt;,&lt;em&gt;function&lt;/em&gt;/&lt;em&gt;locally&lt;/em&gt; scopped. This means that any variable that is declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; outside a function block is available for use in the whole window. &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is function scoped when it is declared within a function. This means that it is available and can be accessed only within that function. Let‚Äôs see one example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ReferenceError: x is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;block-scope&quot;&gt;Block scope&lt;/h1&gt;

&lt;p&gt;A block is chunk of code bounded by {}. A block lives in curly braces. Anything within curly braces is a block. &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is not &lt;em&gt;block-scoped&lt;/em&gt;, so for example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; was still in the ‚Äúglobal scope‚Äù within the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block. &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;‚Äôs value was overwritten, which may have not been the intention.&lt;/p&gt;

&lt;h1 id=&quot;let-declaration&quot;&gt;Let declaration&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; comes as an improvement for &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; declarations. It solves the above example, making the variable &lt;em&gt;block-scoped&lt;/em&gt;. Just like &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, a variable declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; can be updated within its scope. Unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; variable cannot be re-declared within its scope.&lt;/p&gt;

&lt;p&gt;This will work:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return an error:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, if the same variable is defined in different scopes, there will be no error:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0, no error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;const-declaration&quot;&gt;Const declaration&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; declarations, as we can imagined, are used to declare constant values. Like &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; declarations are &lt;em&gt;block-scoped&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Rule of thumb: &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; declarations can never be re-declared or re-assigned. So, both snippets below fail:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error : Assignment to constant variable.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error : Identifier 'hello' has already been declared&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope these really important ES6 additions is a little bit clearer now. I will discuss &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; &lt;em&gt;hoisting&lt;/em&gt; in a future post. ü§ü&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Aug 2018 00:00:00 +0200</pubDate>
        <link>https://www.hugomagalhaes.com/blog/var-let-or-const</link>
        <guid isPermaLink="true">https://www.hugomagalhaes.com/blog/var-let-or-const</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>My personal mission statement</title>
        <description>&lt;p&gt;After reading the book ‚ÄúThe 7 Habits of Highly Successful People‚Äù, written by S. Covey, I understood the real importance of having a clear vision of my personal mission, as a way to always seek to understand if my daily attitudes and achievements are in agreement with my long-term goals. And it serves as a guide so that all my steps, even if the most daily, are in accordance with what I want in the future. Here is my personal mission statement:&lt;/p&gt;

&lt;p&gt;I will always seek to balance my career and my personal life since both are vitally important to my happiness. Some moments will require a greater dedication, both at work and between family and friends, and I will try to be clear to know how to strike the balance between these moments.&lt;/p&gt;

&lt;p&gt;As an entrepreneur, I will always seek to update myself and make my skills always be used in the search for better lives for people and a better world in general.&lt;/p&gt;

&lt;p&gt;As a tech lead, I will always seek to be considered by my experience and by my examples, not by my position. I will publicly praise and acknowledge. Critical and constructive feedbacks I will do privately and directly.&lt;/p&gt;

&lt;p&gt;As a software developer, I will always strive to deliver the highest possible quality, and always make sure my code is tested, easily understood, and maintainable by other developers. I will always be in line with the best and latest technologies. I will always seek to collaborate with the general community by providing open-source code, and will always try to contribute with other open-source libraries and tools.&lt;/p&gt;

&lt;p&gt;I will exercise wisdom in what I choose to read, watch and do at home in my leisure time. I believe that entertainment plays an important role in our lives, but by no means can I allow it to take much of my time.&lt;/p&gt;

&lt;p&gt;My body is my temple. I will use my knowledge and access to information to choose wisely what to eat and how to exercise my body.&lt;/p&gt;

&lt;p&gt;I value the rights, freedoms, and responsibilities of our democratic society. I will be a concerned and informed citizen involved in the political process to ensure my voice is heard and my vote counted.&lt;/p&gt;

&lt;p&gt;I will be an individual of my own initiative who carries out the initiative to accomplish the goals of my life. I will act on situations and opportunities, rather than being attended to.&lt;/p&gt;

&lt;p&gt;I will always try to keep myself free from addictive and destructive habits. I will develop habits that will free me from old labels and boundaries and expand my capabilities and choices.&lt;/p&gt;

&lt;p&gt;My money will be my servant, not my master. I will seek financial independence over time. My desires will be subject to my needs and my means. I will spend less than I earn and regularly save or invest part of my income.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 00:00:00 +0200</pubDate>
        <link>https://www.hugomagalhaes.com/blog/my-personal-mission-statement</link>
        <guid isPermaLink="true">https://www.hugomagalhaes.com/blog/my-personal-mission-statement</guid>
        
        
        <category>personal</category>
        
      </item>
    
  </channel>
</rss>
