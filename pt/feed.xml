<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Nogueira</title>
    <description>Lead front-end engineer and agile manager. React, and Node.js enthusiast. &lt;br/&gt; Principal front-end and Lead engineer @ &lt;a href='http://infinitec.solutions'&gt;Infinitec Solutions&lt;/a&gt;. Berlin, Germany</description>
    <link>/</link>
    <atom:link href="/pt/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 18 Aug 2018 00:07:45 +0200</pubDate>
    <lastBuildDate>Sat, 18 Aug 2018 00:07:45 +0200</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>var, let or const?</title>
        <description>&lt;p&gt;One (or two) of the most important features that came with ES2015 (ES6) was  the addition of &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; which can be used for variable declaration. But, the first question that you may have is: what makes them different from our old &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;? If you are still not clear about this, this article is for you.&lt;/p&gt;

&lt;p&gt;Let’s first review the most important points about &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;var-declarations&quot;&gt;Var declarations&lt;/h1&gt;

&lt;p&gt;I’m assuming that we all know that &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is used to assign some value to a variable that can be reused later. What is important to understand here is the scope where that value will be acessible.&lt;/p&gt;

&lt;h1 id=&quot;var-scope&quot;&gt;Var scope&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; are always &lt;em&gt;globally&lt;/em&gt;,&lt;em&gt;function&lt;/em&gt;/&lt;em&gt;locally&lt;/em&gt; scopped. This means that any variable that is declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; outside a function block is available for use in the whole window. &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is function scoped when it is declared within a function. This means that it is available and can be accessed only within that function. Let’s see one example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ReferenceError: x is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;block-scope&quot;&gt;Block scope&lt;/h1&gt;

&lt;p&gt;A block is chunk of code bounded by {}. A block lives in curly braces. Anything within curly braces is a block. &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is not &lt;em&gt;block-scoped&lt;/em&gt;, so for example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; was still in the “global scope” within the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block. &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;’s value was overwritten, which may have not been the intention.&lt;/p&gt;

&lt;h1 id=&quot;let-declaration&quot;&gt;Let declaration&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; comes as an improvement for &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; declarations. It solves the above example, making the variable &lt;em&gt;block-scoped&lt;/em&gt;. Just like &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, a variable declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; can be updated within its scope. Unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; variable cannot be re-declared within its scope.&lt;/p&gt;

&lt;p&gt;This will work:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return an error:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, if the same variable is defined in different scopes, there will be no error:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0, no error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;const-declaration&quot;&gt;Const declaration&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; declarations, as we can imagined, are used to declare constant values. Like &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; declarations are &lt;em&gt;block-scoped&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Rule of thumb: &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; declarations can never be re-declared or re-assigned. So, both snippets below fail:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error : Assignment to constant variable.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, friend!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, brother!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error : Identifier 'hello' has already been declared&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope these really important ES6 additions is a little bit clearer now. I will discuss &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; &lt;em&gt;hoisting&lt;/em&gt; in a future post. 🤟&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Aug 2018 00:00:00 +0200</pubDate>
        <link>/blog/var-let-or-const</link>
        <guid isPermaLink="true">/blog/var-let-or-const</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Declaração de missão pessoal</title>
        <description>&lt;p&gt;After reading the book “The 7 Habits of Highly Successful People”, written by S. Covey, I understood the real importance of having a clear vision of my personal mission, as a way to always seek to understand if my daily attitudes and achievements are in agreement with my long-term goals. And it serves as a guide so that all my steps, even if the most daily, are in accordance with what I want in the future. Here is my personal mission statement:&lt;/p&gt;

&lt;p&gt;I will always seek to balance my career and my personal life since both are vitally important to my happiness. Some moments will require a greater dedication, both at work and between family and friends, and I will try to be clear to know how to strike the balance between these moments.&lt;/p&gt;

&lt;p&gt;As an entrepreneur, I will always seek to update myself and make my skills always be used in the search for better lives for people and a better world in general.&lt;/p&gt;

&lt;p&gt;As a tech lead, I will always seek to be considered by my experience and by my examples, not by my position. I will publicly praise and acknowledge. Critical and constructive feedbacks I will do privately and directly.&lt;/p&gt;

&lt;p&gt;As a software developer, I will always strive to deliver the highest possible quality, and always make sure my code is tested, easily understood, and maintainable by other developers. I will always be in line with the best and latest technologies. I will always seek to collaborate with the general community by providing open-source code, and will always try to contribute with other open-source libraries and tools.&lt;/p&gt;

&lt;p&gt;I will exercise wisdom in what I choose to read, watch and do at home in my leisure time. I believe that entertainment plays an important role in our lives, but by no means can I allow it to take much of my time.&lt;/p&gt;

&lt;p&gt;My body is my temple. I will use my knowledge and access to information to choose wisely what to eat and how to exercise my body.&lt;/p&gt;

&lt;p&gt;I value the rights, freedoms, and responsibilities of our democratic society. I will be a concerned and informed citizen involved in the political process to ensure my voice is heard and my vote counted.&lt;/p&gt;

&lt;p&gt;I will be an individual of my own initiative who carries out the initiative to accomplish the goals of my life. I will act on situations and opportunities, rather than being attended to.&lt;/p&gt;

&lt;p&gt;I will always try to keep myself free from addictive and destructive habits. I will develop habits that will free me from old labels and boundaries and expand my capabilities and choices.&lt;/p&gt;

&lt;p&gt;My money will be my servant, not my master. I will seek financial independence over time. My desires will be subject to my needs and my means. I will spend less than I earn and regularly save or invest part of my income.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 00:00:00 +0200</pubDate>
        <link>/blog/my-personal-mission-statement</link>
        <guid isPermaLink="true">/blog/my-personal-mission-statement</guid>
        
        
        <category>personal</category>
        
      </item>
    
  </channel>
</rss>
